/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.PollenExchange.Controller;

import com.nepflow.PollenExchange.Dto.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-06T01:21:01.231873100+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Trades", description = "Operations to manage and retrive Trades and their related Entities")
public interface TradesApi {

    default TradesApiDelegate getDelegate() {
        return new TradesApiDelegate() {};
    }

    /**
     * POST /pollenexchange/create/trade : create a Trade
     *
     * @param tradeCreationDTO  (required)
     * @return Trade created successfully. (status code 200)
     *         or error  e.g userId and OfferId are wrong (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeCreateTradePost",
        summary = "create a Trade",
        tags = { "Trades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Trade created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TradeDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "error  e.g userId and OfferId are wrong")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pollenexchange/create/trade",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TradeDTO> pollenexchangeCreateTradePost(
        @Parameter(name = "TradeCreationDTO", description = "", required = true) @Valid @RequestBody TradeCreationDTO tradeCreationDTO
    ) {
        return getDelegate().pollenexchangeCreateTradePost(tradeCreationDTO);
    }


    /**
     * GET /pollenexchange/trade/{tradeId} : get a specific Trade
     *
     * @param tradeId  (required)
     * @return Trade found. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeTradeTradeIdGet",
        summary = "get a specific Trade",
        tags = { "Trades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Trade found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TradeDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/trade/{tradeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TradeDTO> pollenexchangeTradeTradeIdGet(
        @Parameter(name = "tradeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tradeId") String tradeId
    ) {
        return getDelegate().pollenexchangeTradeTradeIdGet(tradeId);
    }


    /**
     * PUT /pollenexchange/trade/{tradeId} : accept or refuse a trade
     *
     * @param tradeId  (required)
     * @param tradeAnswerDTO  (required)
     * @return Trade created successfully. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeTradeTradeIdPut",
        summary = "accept or refuse a trade",
        tags = { "Trades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Trade created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TradeDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/pollenexchange/trade/{tradeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TradeDTO> pollenexchangeTradeTradeIdPut(
        @Parameter(name = "tradeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tradeId") String tradeId,
        @Parameter(name = "TradeAnswerDTO", description = "", required = true) @Valid @RequestBody TradeAnswerDTO tradeAnswerDTO
    ) {
        return getDelegate().pollenexchangeTradeTradeIdPut(tradeId, tradeAnswerDTO);
    }


    /**
     * GET /pollenexchange/trades/dates : return stored dates (Month-Year) the current logged in user has trades
     *
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeTradesDatesGet",
        summary = "return stored dates (Month-Year) the current logged in user has trades",
        tags = { "Trades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/trades/dates",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> pollenexchangeTradesDatesGet(
        
    ) {
        return getDelegate().pollenexchangeTradesDatesGet();
    }


    /**
     * GET /pollenexchange/trades : return all Trades and their status of the currently logged in user
     *
     * @param dates if dates is not send, the current date in germany will be used (date in Format MM-YYY) (optional)
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeTradesGet",
        summary = "return all Trades and their status of the currently logged in user",
        tags = { "Trades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TradeDateContainerDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/trades",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TradeDateContainerDTO>> pollenexchangeTradesGet(
        @Parameter(name = "dates", description = "if dates is not send, the current date in germany will be used (date in Format MM-YYY)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dates", required = false) List<String> dates
    ) {
        return getDelegate().pollenexchangeTradesGet(dates);
    }


    /**
     * GET /pollenexchange/trades/rateable : return all rateable trades of the currently logged in user
     *
     * @return return all trades which are still rateable (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeTradesRateableGet",
        summary = "return all rateable trades of the currently logged in user",
        tags = { "Trades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "return all trades which are still rateable", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TradeDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/trades/rateable",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TradeDTO>> pollenexchangeTradesRateableGet(
        
    ) {
        return getDelegate().pollenexchangeTradesRateableGet();
    }


    /**
     * GET /pollenexchange/{username}/trades/status : return the status of all Trades from the Viewpoint of the User
     *
     * @param username  (required)
     * @return status of all Trades from the Viewpoint of the User (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeUsernameTradesStatusGet",
        summary = "return the status of all Trades from the Viewpoint of the User",
        tags = { "Trades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "status of all Trades from the Viewpoint of the User", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TradeStatusDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/{username}/trades/status",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TradeStatusDTO>> pollenexchangeUsernameTradesStatusGet(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    ) {
        return getDelegate().pollenexchangeUsernameTradesStatusGet(username);
    }


    /**
     * POST /trades/{tradeId}/rating : leave feedback/rate a specific Trade
     *
     * @param tradeId  (required)
     * @param comment  (optional)
     * @param file  (optional)
     * @param reviewType  (optional)
     * @return feedback for the Trade was saved. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "tradesTradeIdRatingPost",
        summary = "leave feedback/rate a specific Trade",
        tags = { "Trades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "feedback for the Trade was saved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NewRatingResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/trades/{tradeId}/rating",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<NewRatingResponseDTO> tradesTradeIdRatingPost(
        @Parameter(name = "tradeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tradeId") String tradeId,
        @Parameter(name = "comment", description = "") @Valid @RequestParam(value = "comment", required = false) String comment,
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file,
        @Parameter(name = "reviewType", description = "") @Valid @RequestParam(value = "reviewType", required = false) com.nepflow.PollenExchange.Model.TradeRating.RATING reviewType
    ) {
        return getDelegate().tradesTradeIdRatingPost(tradeId, comment, file, reviewType);
    }


    /**
     * GET /trades/{username}/ratings : get received ratings of a specific User
     *
     * @param username  (required)
     * @param pageable  (optional)
     * @return received Ratings of a user. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "tradesUsernameRatingsGet",
        summary = "get received ratings of a specific User",
        tags = { "Trades" },
        responses = {
            @ApiResponse(responseCode = "200", description = "received Ratings of a user.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RatingPage.class))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/trades/{username}/ratings",
        produces = { "application/json" }
    )
    
    default ResponseEntity<RatingPage> tradesUsernameRatingsGet(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "pageable", description = "", in = ParameterIn.QUERY) @Valid Pageable pageable
    ) {
        return getDelegate().tradesUsernameRatingsGet(username, pageable);
    }

}
