/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.GrowlistManagement.Controller;

import com.nepflow.GrowlistManagement.Dto.CloneType;
import com.nepflow.GrowlistManagement.Dto.GrowlistDTO;
import com.nepflow.GrowlistManagement.Dto.LabelCloneDTO;
import com.nepflow.GrowlistManagement.Dto.SpecimenCloneDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-06T21:22:32.607237200+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Growlistmanagement", description = "the Growlistmanagement API")
public interface GrowlistmanagementApi {

    default GrowlistmanagementApiDelegate getDelegate() {
        return new GrowlistmanagementApiDelegate() {};
    }

    /**
     * POST /growlist/clone/add/{internalCloneId} : Add an existing Clone of a Nepenthes to the Growlist.
     *
     * @param internalCloneId  (required)
     * @return OK (status code 200)
     *         or Error, could not add Specimen to user (status code 500)
     */
    @Operation(
        operationId = "growlistCloneAddInternalCloneIdPost",
        summary = "Add an existing Clone of a Nepenthes to the Growlist.",
        tags = { "Growlistmanagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SpecimenCloneDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error, could not add Specimen to user")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/growlist/clone/add/{internalCloneId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SpecimenCloneDTO> growlistCloneAddInternalCloneIdPost(
        @Parameter(name = "internalCloneId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("internalCloneId") String internalCloneId
    ) {
        return getDelegate().growlistCloneAddInternalCloneIdPost(internalCloneId);
    }


    /**
     * POST /growlist/clone/create/{cloneType} : Create a new IV or IC Clone and Add it to the Growlist
     *
     * @param cloneType  (required)
     * @param labelCloneDTO  (optional)
     * @return OK (status code 200)
     *         or Error, could not add Specimen to user (status code 500)
     */
    @Operation(
        operationId = "growlistCloneCreateCloneTypePost",
        summary = "Create a new IV or IC Clone and Add it to the Growlist",
        tags = { "Growlistmanagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SpecimenCloneDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error, could not add Specimen to user")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/growlist/clone/create/{cloneType}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SpecimenCloneDTO> growlistCloneCreateCloneTypePost(
        @Parameter(name = "cloneType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cloneType") CloneType cloneType,
        @Parameter(name = "LabelCloneDTO", description = "") @Valid @RequestBody(required = false) LabelCloneDTO labelCloneDTO
    ) {
        return getDelegate().growlistCloneCreateCloneTypePost(cloneType, labelCloneDTO);
    }


    /**
     * DELETE /growlist/clones/{specimenId} : remove a clone from the growlisti If the removed plant was already used for a trade it will be a soft delete in the relation part
     *
     * @param specimenId  (required)
     * @return OK (status code 200)
     *         or Error, could not add Nepenthes Clone to user (status code 500)
     */
    @Operation(
        operationId = "growlistClonesSpecimenIdDelete",
        summary = "remove a clone from the growlisti If the removed plant was already used for a trade it will be a soft delete in the relation part",
        tags = { "Growlistmanagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "500", description = "Error, could not add Nepenthes Clone to user")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/growlist/clones/{specimenId}"
    )
    
    default ResponseEntity<Void> growlistClonesSpecimenIdDelete(
        @Parameter(name = "specimenId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("specimenId") String specimenId
    ) {
        return getDelegate().growlistClonesSpecimenIdDelete(specimenId);
    }


    /**
     * GET /growlist/clones/{specimenId}
     *
     * @param specimenId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "growlistClonesSpecimenIdGet",
        tags = { "Growlistmanagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SpecimenCloneDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/growlist/clones/{specimenId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SpecimenCloneDTO> growlistClonesSpecimenIdGet(
        @Parameter(name = "specimenId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("specimenId") String specimenId
    ) {
        return getDelegate().growlistClonesSpecimenIdGet(specimenId);
    }


    /**
     * PUT /growlist/clones/{specimenId} : update values
     *
     * @param specimenId  (required)
     * @param sex  (optional)
     * @param file  (optional)
     * @return OK (status code 200)
     *         or Could not update Specimen (status code 500)
     */
    @Operation(
        operationId = "growlistClonesSpecimenIdPut",
        summary = "update values",
        tags = { "Growlistmanagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SpecimenCloneDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Could not update Specimen")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/growlist/clones/{specimenId}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<SpecimenCloneDTO> growlistClonesSpecimenIdPut(
        @Parameter(name = "specimenId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("specimenId") String specimenId,
        @Parameter(name = "sex", description = "") @Valid @RequestParam(value = "sex", required = false) String sex,
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return getDelegate().growlistClonesSpecimenIdPut(specimenId, sex, file);
    }


    /**
     * POST /growlist/create/nepenthes/{cloneType} : Create a new Nepenthes and an additional IV or IC Clone and Add it to the Growlist
     *
     * @param cloneType  (required)
     * @param labelCloneDTO  (optional)
     * @return OK (status code 200)
     *         or Error, could not add Specimen to user (status code 500)
     */
    @Operation(
        operationId = "growlistCreateNepenthesCloneTypePost",
        summary = "Create a new Nepenthes and an additional IV or IC Clone and Add it to the Growlist",
        tags = { "Growlistmanagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SpecimenCloneDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Error, could not add Specimen to user")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/growlist/create/nepenthes/{cloneType}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<SpecimenCloneDTO> growlistCreateNepenthesCloneTypePost(
        @Parameter(name = "cloneType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cloneType") CloneType cloneType,
        @Parameter(name = "LabelCloneDTO", description = "") @Valid @RequestBody(required = false) LabelCloneDTO labelCloneDTO
    ) {
        return getDelegate().growlistCreateNepenthesCloneTypePost(cloneType, labelCloneDTO);
    }


    /**
     * GET /growlist/{username}/clones : get all Specimens of a specific User, if Growlist is public
     *
     * @param username  (required)
     * @return OK (status code 200)
     *         or Error, User not found (status code 404)
     */
    @Operation(
        operationId = "growlistUsernameClonesGet",
        summary = "get all Specimens of a specific User, if Growlist is public",
        tags = { "Growlistmanagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GrowlistDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Error, User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/growlist/{username}/clones",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GrowlistDTO> growlistUsernameClonesGet(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    ) {
        return getDelegate().growlistUsernameClonesGet(username);
    }

}
