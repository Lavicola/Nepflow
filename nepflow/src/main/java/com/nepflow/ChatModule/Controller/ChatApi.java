/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.ChatModule.Controller;

import com.nepflow.ChatModule.Dto.ChatDTO;
import com.nepflow.ChatModule.Dto.ChatSummaryDTO;
import com.nepflow.ChatModule.Dto.NewMessageDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-05T00:20:35.211257800+01:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "chat", description = "Operations for the chat")
public interface ChatApi {

    default ChatApiDelegate getDelegate() {
        return new ChatApiDelegate() {};
    }

    /**
     * GET /chats/{chatId} : get one Chat and it´s messages
     *
     * @param chatId  (required)
     * @param pageable  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "chatsChatIdGet",
        summary = "get one Chat and it´s messages",
        tags = { "chat" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChatDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/chats/{chatId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ChatDTO> chatsChatIdGet(
        @Parameter(name = "chatId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("chatId") Integer chatId,
        @NotNull @Parameter(name = "pageable", description = "", required = true, in = ParameterIn.QUERY) @Valid Pageable pageable
    ) {
        return getDelegate().chatsChatIdGet(chatId, pageable);
    }


    /**
     * POST /chats/{chatId} : add a Message to a Chat
     *
     * @param chatId  (required)
     * @param newMessageDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "chatsChatIdPost",
        summary = "add a Message to a Chat",
        tags = { "chat" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NewMessageDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/chats/{chatId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<NewMessageDTO> chatsChatIdPost(
        @Parameter(name = "chatId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("chatId") Integer chatId,
        @Parameter(name = "NewMessageDTO", description = "", required = true) @Valid @RequestBody NewMessageDTO newMessageDTO
    ) {
        return getDelegate().chatsChatIdPost(chatId, newMessageDTO);
    }


    /**
     * GET /chats/ : get a summary of Chats from the currently logged in User
     *
     * @param pageable  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "chatsGet",
        summary = "get a summary of Chats from the currently logged in User",
        tags = { "chat" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChatSummaryDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/chats/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ChatSummaryDTO>> chatsGet(
        @NotNull @Parameter(name = "pageable", description = "", required = true, in = ParameterIn.QUERY) @Valid Pageable pageable
    ) {
        return getDelegate().chatsGet(pageable);
    }

}
