openapi: 3.0.0
info:
  description: API for Pollenexchange Operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Nepflow Pollenexchange
  version: 1.0.0
servers:
- url: http://localhost:4200/api
tags:
- description: Operations to manage and retrive Users
  name: Pollenexchange
paths:
  /pollenexchange/pollenoffers:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PollenOfferDTO"
                type: array
          description: User exists.
        "404":
          description: error
      summary: return all PollenOffers except the ones of the currently logged in
        User
      tags:
      - Pollenexchange
      x-accepts:
      - application/json
      x-tags:
      - tag: Pollenexchange
  /pollenexchange/trades:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TradeDTO"
                type: array
          description: User exists.
        "404":
          description: error
      summary: return all Trades and their status of the currently logged in user
      tags:
      - Pollenexchange
      x-accepts:
      - application/json
      x-tags:
      - tag: Pollenexchange
  /pollenexchange/create/trade:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeCreationDTO"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeDTO"
          description: Trade created successfully.
        "404":
          description: error  e.g userId and OfferId are wrong
      summary: create a Trade
      tags:
      - Pollenexchange
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Pollenexchange
  /pollenexchange/trade/{tradeId}:
    put:
      parameters:
      - explode: false
        in: path
        name: tradeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeAnswerDTO"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeDTO"
          description: Trade created successfully.
        "404":
          description: error
      summary: accept or refuse a trade
      tags:
      - Pollenexchange
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Pollenexchange
components:
  parameters:
    offerId:
      explode: false
      in: path
      name: offerId
      required: true
      schema:
        type: string
      style: simple
    tradeId:
      explode: false
      in: path
      name: tradeId
      required: true
      schema:
        type: string
      style: simple
  schemas:
    TradeAnswerDTO:
      example:
        acceptTrade: true
      properties:
        acceptTrade:
          type: boolean
      type: object
    TradeCreationDTO:
      example:
        userInitiatedOffer: userInitiatedOffer
        userRequestedOffer: userRequestedOffer
        userInitiated: userInitiated
        userRequested: userRequested
      properties:
        userInitiated:
          type: string
        userInitiatedOffer:
          type: string
        userRequested:
          type: string
        userRequestedOffer:
          type: string
      type: object
    UserDTO:
      example:
        country: country
        username: username
      properties:
        username:
          type: string
        country:
          type: string
      type: object
    PollenOfferDTO:
      example:
        seller: seller
        sex: sex
        nepenthesName: nepenthesName
        location: location
        id: id
        cloneId: cloneId
        user:
          country: country
          username: username
        pollenOfferOpenedDate: 2000-01-23
      properties:
        id:
          type: string
        user:
          $ref: "#/components/schemas/UserDTO"
        nepenthesName:
          type: string
        cloneId:
          type: string
        sex:
          type: string
        location:
          type: string
        seller:
          type: string
        pollenOfferOpenedDate:
          format: date
          type: string
      type: object
    TradeDTO:
      example:
        RequestedOffer:
          seller: seller
          sex: sex
          nepenthesName: nepenthesName
          location: location
          id: id
          cloneId: cloneId
          user:
            country: country
            username: username
          pollenOfferOpenedDate: 2000-01-23
        InitiatedOffer:
          seller: seller
          sex: sex
          nepenthesName: nepenthesName
          location: location
          id: id
          cloneId: cloneId
          user:
            country: country
            username: username
          pollenOfferOpenedDate: 2000-01-23
        tradeOpenedDate: 2000-01-23
        id: id
        status: status
      properties:
        id:
          type: string
        status:
          type: string
        InitiatedOffer:
          $ref: "#/components/schemas/PollenOfferDTO"
        RequestedOffer:
          $ref: "#/components/schemas/PollenOfferDTO"
        tradeOpenedDate:
          format: date
          type: string
      type: object
