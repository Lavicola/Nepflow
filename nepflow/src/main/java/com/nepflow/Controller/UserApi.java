/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.Controller;

import com.nepflow.Dto.UserDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-21T00:20:18.974799037+02:00[Europe/Berlin]")
@Validated
@Tag(name = "User", description = "Operations to manage User")
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * GET /user : get Userinformation
     *
     * @return OK (status code 200)
     *         or No Information found for User (status code 404)
     */
    @Operation(
        operationId = "userGet",
        summary = "get Userinformation",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No Information found for User")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<UserDTO> userGet(
        
    ) {
        return getDelegate().userGet();
    }


    /**
     * POST /user : Create an User in the Application with minimal sensitive Information.
     *
     * @param userDTO empty body (required)
     * @return Profile created successfully. (status code 201)
     *         or Error (status code 204)
     */
    @Operation(
        operationId = "userPost",
        summary = "Create an User in the Application with minimal sensitive Information.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Profile created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))
            }),
            @ApiResponse(responseCode = "204", description = "Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserDTO> userPost(
        @Parameter(name = "UserDTO", description = "empty body", required = true) @Valid @RequestBody UserDTO userDTO
    ) {
        return getDelegate().userPost(userDTO);
    }


    /**
     * PUT /user : Update Information of User
     *
     * @param userDTO User DTO with all changeable values (required)
     * @return Profile changed successfully. (status code 201)
     *         or Error (status code 204)
     */
    @Operation(
        operationId = "userPut",
        summary = "Update Information of User",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Profile changed successfully."),
            @ApiResponse(responseCode = "204", description = "Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> userPut(
        @Parameter(name = "UserDTO", description = "User DTO with all changeable values", required = true) @Valid @RequestBody UserDTO userDTO
    ) {
        return getDelegate().userPut(userDTO);
    }

}
