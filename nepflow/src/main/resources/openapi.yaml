openapi: 3.0.0
info:
  description: API for Pollenexchange Operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Nepflow Pollenexchange
  version: 1.0.0
servers:
- url: http://localhost:4200/api
tags:
- description: Operations to manage and retrive PollenOffers
  name: Pollenoffers
- description: Operations to manage and retrive Trades and their related Entities
  name: Trades
paths:
  /pollenexchange/pollenoffers/dates:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: ..
        "404":
          description: error
      summary: return stored dates (Month-Year)
      tags:
      - Pollenoffers
      x-accepts:
      - application/json
      x-tags:
      - tag: Pollenoffers
  /pollenexchange/pollenoffers/open:
    get:
      parameters:
      - description: "if dates is not send, the current date in germany will be used\
          \ (date in Format MM-YYY)"
        explode: true
        in: query
        name: dates
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PollenOfferDateContainerDTO"
                type: array
          description: ..
        "404":
          description: error
      summary: return open PollenOffers by Month-Year
      tags:
      - Pollenoffers
      x-accepts:
      - application/json
      x-tags:
      - tag: Pollenoffers
  /pollenexchange/{username}/pollenoffers/open:
    get:
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PollenOfferDTO"
                type: array
          description: ..
        "404":
          description: error
      summary: return all open PollenOffers of the user
      tags:
      - Pollenoffers
      x-accepts:
      - application/json
      x-tags:
      - tag: Pollenoffers
  /pollenexchange/{username}/pollenoffers/statistics:
    get:
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PollenOfferSpeciesStatisticsDTO"
                type: array
          description: ..
        "404":
          description: error
      summary: return PollenOffer statistics on the different specimens
      tags:
      - Pollenoffers
      x-accepts:
      - application/json
      x-tags:
      - tag: Pollenoffers
  /pollenexchange/trades/dates:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: ..
        "404":
          description: error
      summary: return stored dates (Month-Year) the current logged in user has trades
      tags:
      - Trades
      x-accepts:
      - application/json
      x-tags:
      - tag: Trades
  /pollenexchange/trades:
    get:
      parameters:
      - description: "if dates is not send, the current date in germany will be used\
          \ (date in Format MM-YYY)"
        explode: true
        in: query
        name: dates
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TradeDateContainerDTO"
                type: array
          description: ..
        "404":
          description: error
      summary: return all Trades and their status of the currently logged in user
      tags:
      - Trades
      x-accepts:
      - application/json
      x-tags:
      - tag: Trades
  /pollenexchange/create/trade:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeCreationDTO"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeDTO"
          description: Trade created successfully.
        "404":
          description: error  e.g userId and OfferId are wrong
      summary: create a Trade
      tags:
      - Trades
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Trades
  /pollenexchange/trade/{tradeId}:
    get:
      parameters:
      - explode: false
        in: path
        name: tradeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeDTO"
          description: Trade found.
        "404":
          description: error
      summary: get a specific Trade
      tags:
      - Trades
      x-accepts:
      - application/json
      x-tags:
      - tag: Trades
    put:
      parameters:
      - explode: false
        in: path
        name: tradeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TradeAnswerDTO"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TradeDTO"
          description: Trade created successfully.
        "404":
          description: error
      summary: accept or refuse a trade
      tags:
      - Trades
      x-content-type: application/json
      x-accepts:
      - application/json
      x-tags:
      - tag: Trades
  /pollenexchange/trades/rateable:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TradeDTO"
                type: array
          description: return all trades which are still rateable
        "404":
          description: error
      summary: return all rateable trades of the currently logged in user
      tags:
      - Trades
      x-accepts:
      - application/json
      x-tags:
      - tag: Trades
  /trades/{tradeId}/rating:
    post:
      parameters:
      - explode: false
        in: path
        name: tradeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewRatingDTO"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewRatingResponseDTO"
          description: feedback for the Trade was saved.
        "404":
          description: error
      summary: leave feedback/rate a specific Trade
      tags:
      - Trades
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
      x-tags:
      - tag: Trades
  /trades/{username}/ratings:
    get:
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pageable
        required: false
        schema:
          $ref: "#/components/schemas/Pageable"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RatingPage"
          description: received Ratings of a user.
        "404":
          description: error
      summary: get received ratings of a specific User
      tags:
      - Trades
      x-accepts:
      - application/json
      x-tags:
      - tag: Trades
  /pollenexchange/{username}/trades/status:
    get:
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TradeStatusDTO"
                type: array
          description: status of all Trades from the Viewpoint of the User
        "404":
          description: error
      summary: return the status of all Trades from the Viewpoint of the User
      tags:
      - Trades
      x-accepts:
      - application/json
      x-tags:
      - tag: Trades
components:
  parameters:
    offerId:
      explode: false
      in: path
      name: offerId
      required: true
      schema:
        type: string
      style: simple
    tradeId:
      explode: false
      in: path
      name: tradeId
      required: true
      schema:
        type: string
      style: simple
    username:
      explode: false
      in: path
      name: username
      required: true
      schema:
        type: string
      style: simple
    dates:
      description: "if dates is not send, the current date in germany will be used\
        \ (date in Format MM-YYY)"
      explode: true
      in: query
      name: dates
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
    page:
      description: The page number (zero-based index) for paginated results.
      explode: true
      in: query
      name: page
      required: true
      schema:
        default: 0
        format: int32
        type: integer
      style: form
    size:
      description: The number of items per page.
      explode: true
      in: query
      name: size
      required: true
      schema:
        default: 20
        format: int32
        type: integer
      style: form
  schemas:
    Pageable:
      description: minimal Pageable query parameters
      properties:
        page:
          type: integer
        size:
          type: integer
      type: object
    TradeAnswerDTO:
      example:
        acceptTrade: true
      properties:
        acceptTrade:
          type: boolean
      type: object
    TradeCreationDTO:
      example:
        userInitiatedOffer: userInitiatedOffer
        userRequestedOffer: userRequestedOffer
        userInitiated: userInitiated
        userRequested: userRequested
      properties:
        userInitiated:
          type: string
        userInitiatedOffer:
          type: string
        userRequested:
          type: string
        userRequestedOffer:
          type: string
      type: object
    UserDTO:
      example:
        country: country
        username: username
      properties:
        username:
          type: string
        country:
          type: string
      type: object
    PollenOfferDateContainerDTO:
      example:
        date: date
        pollenOffers:
        - seller: seller
          sex: sex
          nepenthesName: nepenthesName
          location: location
          id: id
          cloneId: cloneId
          user:
            country: country
            username: username
          pollenOfferOpenedDate: 2000-01-23
          imageLocation: imageLocation
        - seller: seller
          sex: sex
          nepenthesName: nepenthesName
          location: location
          id: id
          cloneId: cloneId
          user:
            country: country
            username: username
          pollenOfferOpenedDate: 2000-01-23
          imageLocation: imageLocation
      properties:
        date:
          description: MM-YYYY
          type: string
        pollenOffers:
          items:
            $ref: "#/components/schemas/PollenOfferDTO"
          type: array
      type: object
    PollenOfferDTO:
      example:
        seller: seller
        sex: sex
        nepenthesName: nepenthesName
        location: location
        id: id
        cloneId: cloneId
        user:
          country: country
          username: username
        pollenOfferOpenedDate: 2000-01-23
        imageLocation: imageLocation
      properties:
        id:
          type: string
        user:
          $ref: "#/components/schemas/UserDTO"
        nepenthesName:
          type: string
        cloneId:
          type: string
        sex:
          type: string
        location:
          type: string
        seller:
          type: string
        imageLocation:
          type: string
        pollenOfferOpenedDate:
          format: date
          type: string
      type: object
    TradeDateContainerDTO:
      example:
        date: date
        trades:
        - RequestedOffer:
            seller: seller
            sex: sex
            nepenthesName: nepenthesName
            location: location
            id: id
            cloneId: cloneId
            user:
              country: country
              username: username
            pollenOfferOpenedDate: 2000-01-23
            imageLocation: imageLocation
          InitiatedOffer:
            seller: seller
            sex: sex
            nepenthesName: nepenthesName
            location: location
            id: id
            cloneId: cloneId
            user:
              country: country
              username: username
            pollenOfferOpenedDate: 2000-01-23
            imageLocation: imageLocation
          tradeOpenedDate: 2000-01-23
          id: id
          status: status
        - RequestedOffer:
            seller: seller
            sex: sex
            nepenthesName: nepenthesName
            location: location
            id: id
            cloneId: cloneId
            user:
              country: country
              username: username
            pollenOfferOpenedDate: 2000-01-23
            imageLocation: imageLocation
          InitiatedOffer:
            seller: seller
            sex: sex
            nepenthesName: nepenthesName
            location: location
            id: id
            cloneId: cloneId
            user:
              country: country
              username: username
            pollenOfferOpenedDate: 2000-01-23
            imageLocation: imageLocation
          tradeOpenedDate: 2000-01-23
          id: id
          status: status
      properties:
        date:
          description: MM-YYYY
          type: string
        trades:
          items:
            $ref: "#/components/schemas/TradeDTO"
          type: array
      type: object
    TradeDTO:
      example:
        RequestedOffer:
          seller: seller
          sex: sex
          nepenthesName: nepenthesName
          location: location
          id: id
          cloneId: cloneId
          user:
            country: country
            username: username
          pollenOfferOpenedDate: 2000-01-23
          imageLocation: imageLocation
        InitiatedOffer:
          seller: seller
          sex: sex
          nepenthesName: nepenthesName
          location: location
          id: id
          cloneId: cloneId
          user:
            country: country
            username: username
          pollenOfferOpenedDate: 2000-01-23
          imageLocation: imageLocation
        tradeOpenedDate: 2000-01-23
        id: id
        status: status
      properties:
        id:
          type: string
        status:
          type: string
        InitiatedOffer:
          $ref: "#/components/schemas/PollenOfferDTO"
        RequestedOffer:
          $ref: "#/components/schemas/PollenOfferDTO"
        tradeOpenedDate:
          format: date
          type: string
      type: object
    NewRatingDTO:
      properties:
        comment:
          type: string
        file:
          format: binary
          type: string
        reviewType:
          $ref: "#/components/schemas/ReviewType"
      type: object
    NewRatingResponseDTO:
      example:
        reviewType: SUCCESS
        comment: comment
        imageLocation: imageLocation
      properties:
        comment:
          type: string
        imageLocation:
          type: string
        reviewType:
          $ref: "#/components/schemas/ReviewType"
      type: object
    RatingDTO:
      example:
        file: ""
        rater: rater
        receivedOn: receivedOn
        reviewType: SUCCESS
        comment: comment
        tradeId: tradeId
      properties:
        tradeId:
          type: string
        comment:
          type: string
        rater:
          type: string
        receivedOn:
          type: string
        file:
          format: binary
          type: string
        reviewType:
          $ref: "#/components/schemas/ReviewType"
      type: object
    RatingPage:
      example:
        pageNumber: 6
        ratings:
        - file: ""
          rater: rater
          receivedOn: receivedOn
          reviewType: SUCCESS
          comment: comment
          tradeId: tradeId
        - file: ""
          rater: rater
          receivedOn: receivedOn
          reviewType: SUCCESS
          comment: comment
          tradeId: tradeId
        totalPages: 1
        pageSize: 0
      properties:
        pageSize:
          type: integer
        pageNumber:
          type: integer
        totalPages:
          type: integer
        ratings:
          items:
            $ref: "#/components/schemas/RatingDTO"
          type: array
      type: object
    TradeStatusDTO:
      description: the Status of a Trade from a viewpoint of a specific User
      example:
        creationDate: 2000-01-23
        tradeId: tradeId
        status: SUCCESS
      properties:
        tradeId:
          type: string
        creationDate:
          description: the date the trade was accepted
          format: date
          type: string
        status:
          $ref: "#/components/schemas/ReviewType"
      type: object
    ReviewType:
      enum:
      - SUCCESS
      - FAILURE
      - PENDING
      type: string
      x-enum-varnames:
      - SUCCESS
      - FAILURE
      - PENDING
      x-enumNames:
      - SUCCESS
      - FAILURE
      - PENDING
    PollenOfferSpeciesStatisticsDTO:
      example:
        floweringCount: 0
        specimenId: specimenId
        nepenthesName: nepenthesName
        cloneId: cloneId
      properties:
        specimenId:
          type: string
        floweringCount:
          type: integer
        cloneId:
          type: string
        nepenthesName:
          type: string
      type: object
