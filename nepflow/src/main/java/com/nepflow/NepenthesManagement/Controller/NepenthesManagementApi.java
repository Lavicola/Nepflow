/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.NepenthesManagement.Controller;

import com.nepflow.NepenthesManagement.Dto.CloneDTO;
import com.nepflow.NepenthesManagement.Dto.IVCloneDTO;
import com.nepflow.NepenthesManagement.Dto.NepenthesClonesDTO;
import com.nepflow.NepenthesManagement.Dto.NepenthesNameCloneGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-04T16:31:16.635966249+02:00[Europe/Berlin]")
@Validated
@Tag(name = "NepenthesManagement", description = "Operations to manage Nepenthes")
public interface NepenthesManagementApi {

    default NepenthesManagementApiDelegate getDelegate() {
        return new NepenthesManagementApiDelegate() {};
    }

    /**
     * POST /clone/ic : add a new ic clone of a nepenthes
     *
     * @param cloneDTO Clone DTO with new values (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneIcPost",
        summary = "add a new ic clone of a nepenthes",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/ic",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CloneDTO> cloneIcPost(
        @Parameter(name = "CloneDTO", description = "Clone DTO with new values", required = true) @Valid @RequestBody CloneDTO cloneDTO
    ) {
        return getDelegate().cloneIcPost(cloneDTO);
    }


    /**
     * PUT /clone/ic : change information of an existing clone
     *
     * @param cloneDTO Clone DTO with new values (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneIcPut",
        summary = "change information of an existing clone",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/ic",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CloneDTO> cloneIcPut(
        @Parameter(name = "CloneDTO", description = "Clone DTO with new values", required = true) @Valid @RequestBody CloneDTO cloneDTO
    ) {
        return getDelegate().cloneIcPut(cloneDTO);
    }


    /**
     * POST /clone/iv : add a new iv clone of a nepenthes
     *
     * @param ivCloneDTO Clone DTO with new values (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneIvPost",
        summary = "add a new iv clone of a nepenthes",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IVCloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/iv",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<IVCloneDTO> cloneIvPost(
        @Parameter(name = "IVCloneDTO", description = "Clone DTO with new values", required = true) @Valid @RequestBody IVCloneDTO ivCloneDTO
    ) {
        return getDelegate().cloneIvPost(ivCloneDTO);
    }


    /**
     * PUT /clone/iv : change information of an existing clone
     *
     * @param ivCloneDTO Clone DTO with new values (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneIvPut",
        summary = "change information of an existing clone",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IVCloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/iv",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<IVCloneDTO> cloneIvPut(
        @Parameter(name = "IVCloneDTO", description = "Clone DTO with new values", required = true) @Valid @RequestBody IVCloneDTO ivCloneDTO
    ) {
        return getDelegate().cloneIvPut(ivCloneDTO);
    }


    /**
     * POST /mountain : add a new Mountain
     *
     * @param body MountainDTO with all necessary Attributes (required)
     * @return OK (status code 200)
     *         or Internal Error (status code 500)
     */
    @Operation(
        operationId = "mountainPost",
        summary = "add a new Mountain",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/mountain",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> mountainPost(
        @Parameter(name = "body", description = "MountainDTO with all necessary Attributes", required = true) @Valid @RequestBody String body
    ) {
        return getDelegate().mountainPost(body);
    }


    /**
     * GET /nepenthes : get all nepenthes
     *
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "nepenthesGet",
        summary = "get all nepenthes",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/nepenthes",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> nepenthesGet(
        
    ) {
        return getDelegate().nepenthesGet();
    }


    /**
     * GET /nepenthes/{name}/{clone} : get s specific clone
     *
     * @param name  (required)
     * @param clone  (required)
     * @return OK (status code 200)
     *         or Clone does not exist (status code 404)
     */
    @Operation(
        operationId = "nepenthesNameCloneGet",
        summary = "get s specific clone",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NepenthesNameCloneGet200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Clone does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/nepenthes/{name}/{clone}",
        produces = { "application/json" }
    )
    default ResponseEntity<NepenthesNameCloneGet200Response> nepenthesNameCloneGet(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "clone", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clone") String clone
    ) {
        return getDelegate().nepenthesNameCloneGet(name, clone);
    }


    /**
     * GET /nepenthes/{name} : get a nepenthes and their clones
     *
     * @param name  (required)
     * @return OK (status code 200)
     *         or nepenthes not found (status code 404)
     */
    @Operation(
        operationId = "nepenthesNameGet",
        summary = "get a nepenthes and their clones",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NepenthesClonesDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "nepenthes not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/nepenthes/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<NepenthesClonesDTO> nepenthesNameGet(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return getDelegate().nepenthesNameGet(name);
    }


    /**
     * POST /nepenthes : Create new nepenthes
     *
     * @param body  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "nepenthesPost",
        summary = "Create new nepenthes",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/nepenthes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> nepenthesPost(
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body
    ) {
        return getDelegate().nepenthesPost(body);
    }


    /**
     * POST /producer : add a new Producer
     *
     * @param body DTO with all necessary Attributes (required)
     * @return OK (status code 200)
     *         or Internal Error (status code 500)
     */
    @Operation(
        operationId = "producerPost",
        summary = "add a new Producer",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/producer",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> producerPost(
        @Parameter(name = "body", description = "DTO with all necessary Attributes", required = true) @Valid @RequestBody String body
    ) {
        return getDelegate().producerPost(body);
    }

}
