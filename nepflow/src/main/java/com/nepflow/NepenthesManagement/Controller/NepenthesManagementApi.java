/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.NepenthesManagement.Controller;

import com.nepflow.NepenthesManagement.Dto.CloneHybridsGet200ResponseInner;
import com.nepflow.NepenthesManagement.Dto.CloneSpeciesGet200ResponseInner;
import com.nepflow.NepenthesManagement.Dto.ICCloneDTO;
import com.nepflow.NepenthesManagement.Dto.IVCloneDTO;
import com.nepflow.NepenthesManagement.Dto.NepenthesClonesDTO;
import com.nepflow.NepenthesManagement.Dto.NepenthesNameCloneGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-13T23:03:32.853119600+02:00[Europe/Berlin]")
@Validated
@Tag(name = "NepenthesManagement", description = "Operations to manage Nepenthes")
public interface NepenthesManagementApi {

    default NepenthesManagementApiDelegate getDelegate() {
        return new NepenthesManagementApiDelegate() {};
    }

    /**
     * GET /clone/hybrids/ : get all Species Clones
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneHybridsGet",
        summary = "get all Species Clones",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CloneHybridsGet200ResponseInner.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/hybrids/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<CloneHybridsGet200ResponseInner>> cloneHybridsGet(
        
    ) {
        return getDelegate().cloneHybridsGet();
    }


    /**
     * POST /clone/hybrids/ic : add a new iv hybrid clone
     *
     * @param icCloneDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneHybridsIcPost",
        summary = "add a new iv hybrid clone",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ICCloneDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/hybrids/ic",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ICCloneDTO> cloneHybridsIcPost(
        @Parameter(name = "ICCloneDTO", description = "", required = true) @Valid @RequestBody ICCloneDTO icCloneDTO
    ) {
        return getDelegate().cloneHybridsIcPost(icCloneDTO);
    }


    /**
     * PUT /clone/hybrids/ic
     *
     * @param icCloneDTO  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneHybridsIcPut",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ICCloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/hybrids/ic",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ICCloneDTO> cloneHybridsIcPut(
        @Parameter(name = "ICCloneDTO", description = "", required = true) @Valid @RequestBody ICCloneDTO icCloneDTO
    ) {
        return getDelegate().cloneHybridsIcPut(icCloneDTO);
    }


    /**
     * POST /clone/hybrids/iv : add a new iv hybrid
     *
     * @param ivCloneDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneHybridsIvPost",
        summary = "add a new iv hybrid",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IVCloneDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/hybrids/iv",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<IVCloneDTO> cloneHybridsIvPost(
        @Parameter(name = "IVCloneDTO", description = "", required = true) @Valid @RequestBody IVCloneDTO ivCloneDTO
    ) {
        return getDelegate().cloneHybridsIvPost(ivCloneDTO);
    }


    /**
     * PUT /clone/hybrids/iv
     *
     * @param ivCloneDTO  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneHybridsIvPut",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IVCloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/hybrids/iv",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<IVCloneDTO> cloneHybridsIvPut(
        @Parameter(name = "IVCloneDTO", description = "", required = true) @Valid @RequestBody IVCloneDTO ivCloneDTO
    ) {
        return getDelegate().cloneHybridsIvPut(ivCloneDTO);
    }


    /**
     * GET /clone/multi-hybrid/ : get all multi-hybrid Clones
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneMultiHybridGet",
        summary = "get all multi-hybrid Clones",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CloneHybridsGet200ResponseInner.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/multi-hybrid/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<CloneHybridsGet200ResponseInner>> cloneMultiHybridGet(
        
    ) {
        return getDelegate().cloneMultiHybridGet();
    }


    /**
     * POST /clone/multi-hybrid/ic : add a new iv multi-hybrid clone
     *
     * @param icCloneDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneMultiHybridIcPost",
        summary = "add a new iv multi-hybrid clone",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ICCloneDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/multi-hybrid/ic",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ICCloneDTO> cloneMultiHybridIcPost(
        @Parameter(name = "ICCloneDTO", description = "", required = true) @Valid @RequestBody ICCloneDTO icCloneDTO
    ) {
        return getDelegate().cloneMultiHybridIcPost(icCloneDTO);
    }


    /**
     * PUT /clone/multi-hybrid/ic
     *
     * @param icCloneDTO  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneMultiHybridIcPut",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ICCloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/multi-hybrid/ic",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ICCloneDTO> cloneMultiHybridIcPut(
        @Parameter(name = "ICCloneDTO", description = "", required = true) @Valid @RequestBody ICCloneDTO icCloneDTO
    ) {
        return getDelegate().cloneMultiHybridIcPut(icCloneDTO);
    }


    /**
     * POST /clone/multi-hybrid/iv : add a new iv multi-hybrid
     *
     * @param ivCloneDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneMultiHybridIvPost",
        summary = "add a new iv multi-hybrid",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IVCloneDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/multi-hybrid/iv",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<IVCloneDTO> cloneMultiHybridIvPost(
        @Parameter(name = "IVCloneDTO", description = "", required = true) @Valid @RequestBody IVCloneDTO ivCloneDTO
    ) {
        return getDelegate().cloneMultiHybridIvPost(ivCloneDTO);
    }


    /**
     * PUT /clone/multi-hybrid/iv
     *
     * @param ivCloneDTO  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneMultiHybridIvPut",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IVCloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/multi-hybrid/iv",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<IVCloneDTO> cloneMultiHybridIvPut(
        @Parameter(name = "IVCloneDTO", description = "", required = true) @Valid @RequestBody IVCloneDTO ivCloneDTO
    ) {
        return getDelegate().cloneMultiHybridIvPut(ivCloneDTO);
    }


    /**
     * GET /clone/species/ : get all Species Clones
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneSpeciesGet",
        summary = "get all Species Clones",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CloneSpeciesGet200ResponseInner.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/species/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<CloneSpeciesGet200ResponseInner>> cloneSpeciesGet(
        
    ) {
        return getDelegate().cloneSpeciesGet();
    }


    /**
     * POST /clone/species/ic : add a new iv clone of a nepenthes
     *
     * @param icCloneDTO Clone DTO with new values (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneSpeciesIcPost",
        summary = "add a new iv clone of a nepenthes",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ICCloneDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/species/ic",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ICCloneDTO> cloneSpeciesIcPost(
        @Parameter(name = "ICCloneDTO", description = "Clone DTO with new values", required = true) @Valid @RequestBody ICCloneDTO icCloneDTO
    ) {
        return getDelegate().cloneSpeciesIcPost(icCloneDTO);
    }


    /**
     * PUT /clone/species/ic
     *
     * @param icCloneDTO  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneSpeciesIcPut",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ICCloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/species/ic",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ICCloneDTO> cloneSpeciesIcPut(
        @Parameter(name = "ICCloneDTO", description = "", required = true) @Valid @RequestBody ICCloneDTO icCloneDTO
    ) {
        return getDelegate().cloneSpeciesIcPut(icCloneDTO);
    }


    /**
     * POST /clone/species/iv : add a new iv clone of a nepenthes
     *
     * @param ivCloneDTO Clone DTO with new values (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneSpeciesIvPost",
        summary = "add a new iv clone of a nepenthes",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IVCloneDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/species/iv",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<IVCloneDTO> cloneSpeciesIvPost(
        @Parameter(name = "IVCloneDTO", description = "Clone DTO with new values", required = true) @Valid @RequestBody IVCloneDTO ivCloneDTO
    ) {
        return getDelegate().cloneSpeciesIvPost(ivCloneDTO);
    }


    /**
     * PUT /clone/species/iv
     *
     * @param ivCloneDTO  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "cloneSpeciesIvPut",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IVCloneDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/species/iv",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<IVCloneDTO> cloneSpeciesIvPut(
        @Parameter(name = "IVCloneDTO", description = "", required = true) @Valid @RequestBody IVCloneDTO ivCloneDTO
    ) {
        return getDelegate().cloneSpeciesIvPut(ivCloneDTO);
    }


    /**
     * POST /location : add a new Location
     *
     * @param body LocationdTo with all necessary Attributes (required)
     * @return OK (status code 200)
     *         or Internal Error (status code 500)
     */
    @Operation(
        operationId = "locationPost",
        summary = "add a new Location",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/location",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> locationPost(
        @Parameter(name = "body", description = "LocationdTo with all necessary Attributes", required = true) @Valid @RequestBody String body
    ) {
        return getDelegate().locationPost(body);
    }


    /**
     * GET /nepenthes : get all nepenthes
     *
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "nepenthesGet",
        summary = "get all nepenthes",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/nepenthes",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> nepenthesGet(
        
    ) {
        return getDelegate().nepenthesGet();
    }


    /**
     * GET /nepenthes/{name}/{clone} : get s specific clone
     *
     * @param name  (required)
     * @param clone  (required)
     * @return OK (status code 200)
     *         or Clone does not exist (status code 404)
     */
    @Operation(
        operationId = "nepenthesNameCloneGet",
        summary = "get s specific clone",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NepenthesNameCloneGet200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Clone does not exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/nepenthes/{name}/{clone}",
        produces = { "application/json" }
    )
    default ResponseEntity<NepenthesNameCloneGet200Response> nepenthesNameCloneGet(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "clone", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clone") String clone
    ) {
        return getDelegate().nepenthesNameCloneGet(name, clone);
    }


    /**
     * GET /nepenthes/{name} : get a nepenthes and their clones
     *
     * @param name  (required)
     * @return OK (status code 200)
     *         or nepenthes not found (status code 404)
     */
    @Operation(
        operationId = "nepenthesNameGet",
        summary = "get a nepenthes and their clones",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NepenthesClonesDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "nepenthes not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/nepenthes/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<NepenthesClonesDTO> nepenthesNameGet(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return getDelegate().nepenthesNameGet(name);
    }


    /**
     * POST /nepenthes : Create new nepenthes
     *
     * @param body  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "nepenthesPost",
        summary = "Create new nepenthes",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/nepenthes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> nepenthesPost(
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body
    ) {
        return getDelegate().nepenthesPost(body);
    }


    /**
     * POST /producer : add a new Producer
     *
     * @param body DTO with all necessary Attributes (required)
     * @return OK (status code 200)
     *         or Internal Error (status code 500)
     */
    @Operation(
        operationId = "producerPost",
        summary = "add a new Producer",
        tags = { "NepenthesManagement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/producer",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> producerPost(
        @Parameter(name = "body", description = "DTO with all necessary Attributes", required = true) @Valid @RequestBody String body
    ) {
        return getDelegate().producerPost(body);
    }

}
