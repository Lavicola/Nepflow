/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.PollenExchange.Controller;

import com.nepflow.PollenExchange.Dto.PollenOfferDTO;
import com.nepflow.PollenExchange.Dto.PollenOfferDateContainerDTO;
import com.nepflow.PollenExchange.Dto.PollenOfferSpeciesStatisticsDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-06T01:21:01.231873100+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Pollenoffers", description = "Operations to manage and retrive PollenOffers")
public interface PollenoffersApi {

    default PollenoffersApiDelegate getDelegate() {
        return new PollenoffersApiDelegate() {};
    }

    /**
     * GET /pollenexchange/pollenoffers/dates : return stored dates (Month-Year)
     *
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangePollenoffersDatesGet",
        summary = "return stored dates (Month-Year)",
        tags = { "Pollenoffers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/pollenoffers/dates",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> pollenexchangePollenoffersDatesGet(
        
    ) {
        return getDelegate().pollenexchangePollenoffersDatesGet();
    }


    /**
     * GET /pollenexchange/pollenoffers/open : return open PollenOffers by Month-Year
     *
     * @param dates if dates is not send, the current date in germany will be used (date in Format MM-YYY) (optional)
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangePollenoffersOpenGet",
        summary = "return open PollenOffers by Month-Year",
        tags = { "Pollenoffers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PollenOfferDateContainerDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/pollenoffers/open",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PollenOfferDateContainerDTO>> pollenexchangePollenoffersOpenGet(
        @Parameter(name = "dates", description = "if dates is not send, the current date in germany will be used (date in Format MM-YYY)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dates", required = false) List<String> dates
    ) {
        return getDelegate().pollenexchangePollenoffersOpenGet(dates);
    }


    /**
     * GET /pollenexchange/{username}/pollenoffers/open : return all open PollenOffers of the user
     *
     * @param username  (required)
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeUsernamePollenoffersOpenGet",
        summary = "return all open PollenOffers of the user",
        tags = { "Pollenoffers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PollenOfferDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/{username}/pollenoffers/open",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PollenOfferDTO>> pollenexchangeUsernamePollenoffersOpenGet(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    ) {
        return getDelegate().pollenexchangeUsernamePollenoffersOpenGet(username);
    }


    /**
     * GET /pollenexchange/{username}/pollenoffers/statistics : return PollenOffer statistics on the different specimens
     *
     * @param username  (required)
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeUsernamePollenoffersStatisticsGet",
        summary = "return PollenOffer statistics on the different specimens",
        tags = { "Pollenoffers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PollenOfferSpeciesStatisticsDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/{username}/pollenoffers/statistics",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PollenOfferSpeciesStatisticsDTO>> pollenexchangeUsernamePollenoffersStatisticsGet(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    ) {
        return getDelegate().pollenexchangeUsernamePollenoffersStatisticsGet(username);
    }

}
