/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.PollenExchange.Controller;

import com.nepflow.PollenExchange.Dto.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-12T00:59:51.133905700+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Pollenexchange", description = "Operations to manage and retrive Users")
public interface PollenexchangeApi {

    default PollenexchangeApiDelegate getDelegate() {
        return new PollenexchangeApiDelegate() {};
    }

    /**
     * POST /pollenexchange/create/trade : create a Trade
     *
     * @param tradeCreationDTO  (required)
     * @return Trade created successfully. (status code 200)
     *         or error  e.g userId and OfferId are wrong (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeCreateTradePost",
        summary = "create a Trade",
        tags = { "Pollenexchange" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Trade created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TradeDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "error  e.g userId and OfferId are wrong")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pollenexchange/create/trade",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TradeDTO> pollenexchangeCreateTradePost(
        @Parameter(name = "TradeCreationDTO", description = "", required = true) @Valid @RequestBody TradeCreationDTO tradeCreationDTO
    ) {
        return getDelegate().pollenexchangeCreateTradePost(tradeCreationDTO);
    }


    /**
     * GET /pollenexchange/pollenoffers/dates : return stored dates (Month-Year)
     *
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangePollenoffersDatesGet",
        summary = "return stored dates (Month-Year)",
        tags = { "Pollenexchange" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/pollenoffers/dates",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> pollenexchangePollenoffersDatesGet(
        
    ) {
        return getDelegate().pollenexchangePollenoffersDatesGet();
    }


    /**
     * GET /pollenexchange/pollenoffers/open : return open PollenOffers by Month-Year
     *
     * @param dates if dates is not send, the current date in germany will be used (date in Format MM-YYY) (optional)
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangePollenoffersOpenGet",
        summary = "return open PollenOffers by Month-Year",
        tags = { "Pollenexchange" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PollenOfferDateContainerDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/pollenoffers/open",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PollenOfferDateContainerDTO>> pollenexchangePollenoffersOpenGet(
        @Parameter(name = "dates", description = "if dates is not send, the current date in germany will be used (date in Format MM-YYY)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dates", required = false) List<String> dates
    ) {
        return getDelegate().pollenexchangePollenoffersOpenGet(dates);
    }


    /**
     * GET /pollenexchange/trade/{tradeId} : get a specific Trade
     *
     * @param tradeId  (required)
     * @return Trade found. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeTradeTradeIdGet",
        summary = "get a specific Trade",
        tags = { "Pollenexchange" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Trade found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TradeDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/trade/{tradeId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TradeDTO> pollenexchangeTradeTradeIdGet(
        @Parameter(name = "tradeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tradeId") String tradeId
    ) {
        return getDelegate().pollenexchangeTradeTradeIdGet(tradeId);
    }


    /**
     * PUT /pollenexchange/trade/{tradeId} : accept or refuse a trade
     *
     * @param tradeId  (required)
     * @param tradeAnswerDTO  (required)
     * @return Trade created successfully. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeTradeTradeIdPut",
        summary = "accept or refuse a trade",
        tags = { "Pollenexchange" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Trade created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TradeDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/pollenexchange/trade/{tradeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TradeDTO> pollenexchangeTradeTradeIdPut(
        @Parameter(name = "tradeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tradeId") String tradeId,
        @Parameter(name = "TradeAnswerDTO", description = "", required = true) @Valid @RequestBody TradeAnswerDTO tradeAnswerDTO
    ) {
        return getDelegate().pollenexchangeTradeTradeIdPut(tradeId, tradeAnswerDTO);
    }


    /**
     * GET /pollenexchange/trades/dates : return stored dates (Month-Year)
     *
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeTradesDatesGet",
        summary = "return stored dates (Month-Year)",
        tags = { "Pollenexchange" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/trades/dates",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> pollenexchangeTradesDatesGet(
        
    ) {
        return getDelegate().pollenexchangeTradesDatesGet();
    }


    /**
     * GET /pollenexchange/{username}/pollenoffers/open : return all open PollenOffers of the user
     *
     * @param username  (required)
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeUsernamePollenoffersOpenGet",
        summary = "return all open PollenOffers of the user",
        tags = { "Pollenexchange" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PollenOfferDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/{username}/pollenoffers/open",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PollenOfferDTO>> pollenexchangeUsernamePollenoffersOpenGet(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    ) {
        return getDelegate().pollenexchangeUsernamePollenoffersOpenGet(username);
    }


    /**
     * GET /pollenexchange/{username}/trades : return all Trades and their status of the currently logged in user
     *
     * @param username  (required)
     * @param dates if dates is not send, the current date in germany will be used (date in Format MM-YYY) (optional)
     * @return .. (status code 200)
     *         or error (status code 404)
     */
    @Operation(
        operationId = "pollenexchangeUsernameTradesGet",
        summary = "return all Trades and their status of the currently logged in user",
        tags = { "Pollenexchange" },
        responses = {
            @ApiResponse(responseCode = "200", description = "..", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TradeDateContainerDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pollenexchange/{username}/trades",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TradeDateContainerDTO>> pollenexchangeUsernameTradesGet(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username,
        @Parameter(name = "dates", description = "if dates is not send, the current date in germany will be used (date in Format MM-YYY)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dates", required = false) List<String> dates
    ) {
        return getDelegate().pollenexchangeUsernameTradesGet(username, dates);
    }

}
