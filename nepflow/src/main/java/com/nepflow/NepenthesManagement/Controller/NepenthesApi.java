/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.NepenthesManagement.Controller;

import com.nepflow.NepenthesManagement.Dto.CloneType;
import com.nepflow.NepenthesManagement.Dto.LabelCloneDTO;
import com.nepflow.NepenthesManagement.Dto.LabelClonesDTO;
import com.nepflow.NepenthesManagement.Dto.LabelDTO;
import com.nepflow.NepenthesManagement.Dto.NepenthesType;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-20T00:23:06.948612500+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "nepenthes", description = "the nepenthes API")
public interface NepenthesApi {

    default NepenthesApiDelegate getDelegate() {
        return new NepenthesApiDelegate() {};
    }

    /**
     * GET /clone/{nepenthesType}/{cloneType}/{name} : get either iv or ic clones of a Nepenthes
     *
     * @param nepenthesType  (required)
     * @param cloneType  (required)
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneNepenthesTypeCloneTypeNameGet",
        summary = "get either iv or ic clones of a Nepenthes",
        tags = { "nepenthes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/{nepenthesType}/{cloneType}/{name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<LabelClonesDTO> cloneNepenthesTypeCloneTypeNameGet(
        @Parameter(name = "nepenthesType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("nepenthesType") NepenthesType nepenthesType,
        @Parameter(name = "cloneType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cloneType") CloneType cloneType,
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return getDelegate().cloneNepenthesTypeCloneTypeNameGet(nepenthesType, cloneType, name);
    }


    /**
     * PUT /clone/{nepenthesType}/{cloneType}/{name}/{internalCloneId} : update a Clone
     *
     * @param nepenthesType  (required)
     * @param cloneType  (required)
     * @param name  (required)
     * @param internalCloneId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneNepenthesTypeCloneTypeNameInternalCloneIdPut",
        summary = "update a Clone",
        tags = { "nepenthes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelCloneDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/{nepenthesType}/{cloneType}/{name}/{internalCloneId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<LabelCloneDTO> cloneNepenthesTypeCloneTypeNameInternalCloneIdPut(
        @Parameter(name = "nepenthesType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("nepenthesType") NepenthesType nepenthesType,
        @Parameter(name = "cloneType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cloneType") CloneType cloneType,
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "internalCloneId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("internalCloneId") String internalCloneId
    ) {
        return getDelegate().cloneNepenthesTypeCloneTypeNameInternalCloneIdPut(nepenthesType, cloneType, name, internalCloneId);
    }


    /**
     * POST /clone/{nepenthesType}/{cloneType}/{name} : add a new clone to a nepenthes
     *
     * @param nepenthesType  (required)
     * @param cloneType  (required)
     * @param name  (required)
     * @param labelCloneDTO Clone DTO with new values (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneNepenthesTypeCloneTypeNamePost",
        summary = "add a new clone to a nepenthes",
        tags = { "nepenthes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelCloneDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/{nepenthesType}/{cloneType}/{name}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<LabelCloneDTO> cloneNepenthesTypeCloneTypeNamePost(
        @Parameter(name = "nepenthesType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("nepenthesType") NepenthesType nepenthesType,
        @Parameter(name = "cloneType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cloneType") CloneType cloneType,
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "LabelCloneDTO", description = "Clone DTO with new values", required = true) @Valid @RequestBody LabelCloneDTO labelCloneDTO
    ) {
        return getDelegate().cloneNepenthesTypeCloneTypeNamePost(nepenthesType, cloneType, name, labelCloneDTO);
    }


    /**
     * GET /clone/{nepenthesType} : get all Nepenthes of a specific Nepenthestype
     *
     * @param nepenthesType  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneNepenthesTypeGet",
        summary = "get all Nepenthes of a specific Nepenthestype",
        tags = { "nepenthes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LabelDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/{nepenthesType}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<LabelDTO>> cloneNepenthesTypeGet(
        @Parameter(name = "nepenthesType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("nepenthesType") NepenthesType nepenthesType
    ) {
        return getDelegate().cloneNepenthesTypeGet(nepenthesType);
    }


    /**
     * GET /clone/{nepenthesType}/{name} : get all clones of a Nepenthes
     *
     * @param nepenthesType  (required)
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cloneNepenthesTypeNameGet",
        summary = "get all clones of a Nepenthes",
        tags = { "nepenthes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/{nepenthesType}/{name}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<LabelClonesDTO> cloneNepenthesTypeNameGet(
        @Parameter(name = "nepenthesType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("nepenthesType") NepenthesType nepenthesType,
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return getDelegate().cloneNepenthesTypeNameGet(nepenthesType, name);
    }

}
