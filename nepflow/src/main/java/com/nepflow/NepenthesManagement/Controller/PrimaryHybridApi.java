/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nepflow.NepenthesManagement.Controller;

import com.nepflow.NepenthesManagement.Dto.LabelClonesDTO;
import com.nepflow.NepenthesManagement.Dto.LabelDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-11T01:56:15.806697200+02:00[Europe/Berlin]")
@Validated
@Tag(name = "PrimaryHybrid", description = "the PrimaryHybrid API")
public interface PrimaryHybridApi {

    default PrimaryHybridApiDelegate getDelegate() {
        return new PrimaryHybridApiDelegate() {};
    }

    /**
     * GET /clone/primary-hybrid/ : get all Primary Hybrids
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clonePrimaryHybridGet",
        summary = "get all Primary Hybrids",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LabelDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/primary-hybrid/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<LabelDTO>> clonePrimaryHybridGet(
        
    ) {
        return getDelegate().clonePrimaryHybridGet();
    }


    /**
     * GET /clone/primary-hybrid/ic : get all IC Primary Hybrid Clones
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clonePrimaryHybridIcGet",
        summary = "get all IC Primary Hybrid Clones",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LabelClonesDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/primary-hybrid/ic",
        produces = { "application/json" }
    )
    default ResponseEntity<List<LabelClonesDTO>> clonePrimaryHybridIcGet(
        
    ) {
        return getDelegate().clonePrimaryHybridIcGet();
    }


    /**
     * GET /clone/primary-hybrid/ic/{name} : get all IC Clones of a Primary Hybrid
     *
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clonePrimaryHybridIcNameGet",
        summary = "get all IC Clones of a Primary Hybrid",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/primary-hybrid/ic/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<LabelClonesDTO> clonePrimaryHybridIcNameGet(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return getDelegate().clonePrimaryHybridIcNameGet(name);
    }


    /**
     * POST /clone/primary-hybrid/ic/{name} : add a new iv clone to a Primary Hybrid
     *
     * @param name  (required)
     * @param labelClonesDTO Clone DTO with new values (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clonePrimaryHybridIcNamePost",
        summary = "add a new iv clone to a Primary Hybrid",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/primary-hybrid/ic/{name}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<LabelClonesDTO> clonePrimaryHybridIcNamePost(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "LabelClonesDTO", description = "Clone DTO with new values", required = true) @Valid @RequestBody LabelClonesDTO labelClonesDTO
    ) {
        return getDelegate().clonePrimaryHybridIcNamePost(name, labelClonesDTO);
    }


    /**
     * PUT /clone/primary-hybrid/ic/{name}
     *
     * @param name  (required)
     * @param labelClonesDTO  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "clonePrimaryHybridIcNamePut",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/primary-hybrid/ic/{name}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<LabelClonesDTO> clonePrimaryHybridIcNamePut(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "LabelClonesDTO", description = "", required = true) @Valid @RequestBody LabelClonesDTO labelClonesDTO
    ) {
        return getDelegate().clonePrimaryHybridIcNamePut(name, labelClonesDTO);
    }


    /**
     * GET /clone/primary-hybrid/iv/{name} : get all Primary Hybrid IV Clones
     *
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clonePrimaryHybridIvNameGet",
        summary = "get all Primary Hybrid IV Clones",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/primary-hybrid/iv/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<LabelClonesDTO> clonePrimaryHybridIvNameGet(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return getDelegate().clonePrimaryHybridIvNameGet(name);
    }


    /**
     * POST /clone/primary-hybrid/iv/{name} : add a new iv clone to a Primary Hybrid
     *
     * @param name  (required)
     * @param labelClonesDTO Clone DTO with new values (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clonePrimaryHybridIvNamePost",
        summary = "add a new iv clone to a Primary Hybrid",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/primary-hybrid/iv/{name}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<LabelClonesDTO> clonePrimaryHybridIvNamePost(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "LabelClonesDTO", description = "Clone DTO with new values", required = true) @Valid @RequestBody LabelClonesDTO labelClonesDTO
    ) {
        return getDelegate().clonePrimaryHybridIvNamePost(name, labelClonesDTO);
    }


    /**
     * PUT /clone/primary-hybrid/iv/{name}
     *
     * @param name  (required)
     * @param labelClonesDTO  (required)
     * @return OK (status code 200)
     *         or No nepenthes found (status code 404)
     */
    @Operation(
        operationId = "clonePrimaryHybridIvNamePut",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "No nepenthes found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clone/primary-hybrid/iv/{name}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<LabelClonesDTO> clonePrimaryHybridIvNamePut(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "LabelClonesDTO", description = "", required = true) @Valid @RequestBody LabelClonesDTO labelClonesDTO
    ) {
        return getDelegate().clonePrimaryHybridIvNamePut(name, labelClonesDTO);
    }


    /**
     * GET /clone/primary-hybrid/{name} : get all Primary Hybrid Clones of a Primary Hybrid
     *
     * @param name  (required)
     * @return OK (status code 200)
     *         or nepenthes not found (status code 404)
     */
    @Operation(
        operationId = "clonePrimaryHybridNameGet",
        summary = "get all Primary Hybrid Clones of a Primary Hybrid",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "nepenthes not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clone/primary-hybrid/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<LabelClonesDTO> clonePrimaryHybridNameGet(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return getDelegate().clonePrimaryHybridNameGet(name);
    }


    /**
     * POST /clone/primary-hybrid/ : add a new Primary Hybrid
     *
     * @param labelClonesDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clonePrimaryHybridPost",
        summary = "add a new Primary Hybrid",
        tags = { "PrimaryHybrid" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LabelClonesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clone/primary-hybrid/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<LabelClonesDTO> clonePrimaryHybridPost(
        @Parameter(name = "LabelClonesDTO", description = "", required = true) @Valid @RequestBody LabelClonesDTO labelClonesDTO
    ) {
        return getDelegate().clonePrimaryHybridPost(labelClonesDTO);
    }

}
